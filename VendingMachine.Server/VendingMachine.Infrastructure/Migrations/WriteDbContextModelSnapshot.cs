// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VendingMachine.Infrastructure.DbContexts;

#nullable disable

namespace VendingMachine.Infrastructure.Migrations
{
    [DbContext(typeof(WriteDbContext))]
    partial class WriteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VendingMachine.Domain.Aggregates.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Title", "VendingMachine.Domain.Aggregates.Brand.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Title");
                        });

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("VendingMachine.Domain.Aggregates.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("CreatedAt", "VendingMachine.Domain.Aggregates.Order.CreatedAt#OrderDate", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Value")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("CreatedAt");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("TotalAmount", "VendingMachine.Domain.Aggregates.Order.TotalAmount#TotalAmount", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric")
                                .HasColumnName("TotalAmount");
                        });

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("VendingMachine.Domain.Entities.Coin", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Denomination")
                        .HasColumnType("integer");

                    b.ComplexProperty<Dictionary<string, object>>("Stock", "VendingMachine.Domain.Entities.Coin.Stock#Stock", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("Stock");
                        });

                    b.HasKey("Id");

                    b.ToTable("Coins");
                });

            modelBuilder.Entity("VendingMachine.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("BrandTitle", "VendingMachine.Domain.Entities.OrderItem.BrandTitle#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("BrandTitle");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("ProductPrice", "VendingMachine.Domain.Entities.OrderItem.ProductPrice#Price", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric")
                                .HasColumnName("ProductPrice");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("ProductTitle", "VendingMachine.Domain.Entities.OrderItem.ProductTitle#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("ProductTitle");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Quantity", "VendingMachine.Domain.Entities.OrderItem.Quantity#Quantity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("Quantity");
                        });

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("VendingMachine.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("FilePath", "VendingMachine.Domain.Entities.Product.FilePath#FilePath", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("FilePath");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Price", "VendingMachine.Domain.Entities.Product.Price#Price", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric")
                                .HasColumnName("Price");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Stock", "VendingMachine.Domain.Entities.Product.Stock#Stock", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("Stock");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Title", "VendingMachine.Domain.Entities.Product.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Title");
                        });

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("VendingMachine.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("VendingMachine.Domain.Aggregates.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VendingMachine.Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VendingMachine.Domain.Entities.Product", b =>
                {
                    b.HasOne("VendingMachine.Domain.Aggregates.Brand", null)
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VendingMachine.Domain.Aggregates.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("VendingMachine.Domain.Aggregates.Order", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
